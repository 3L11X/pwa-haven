{"version":3,"file":"build/bundle.css","mappings":"AA4BE,sBAAQ,wBACmB,CACzB,qEAAuD,CACxD,iCAEkB,GACb,YACW,CACd,KACK,OACI,CACT;AAtCL,q9DAAq9D,C;ACoBn9D,qCAAwB,wCACmB,CACzC,+BAAgC;AAtBpC,y1CAAy1C,C;AC4Mv1C,2EAAoC,WACtB,CACZ,cAAe;AA9MnB,yuUAAyuU,C;ACcvuU,oBAAM,kBACe,CACrB,YAAa,CACb,wBAAyB,CACvB,6BAA8B,CAC9B,YAAa;AAnBjB,ikCAAikC,C;ACsI/jC,qBAAO,kBACc,CACpB,2BAEY,iBACO,CACnB,uBACQ,cACQ,CACf,YAAa;AA/IjB,y2OAAy2O,C;ACkNv2O,gCAAmB,cACF;AAnNnB,6yYAA6yY,C;ACyG3yY,eAAG,gBACgB,CAClB,6BACe,wBACW,CACzB,WAAY,CACb,SACkB,cACF;AAjHnB,6mKAA6mK,C","sources":["webpack://torrent-client/./src/components/InstallPrompt.svelte","webpack://torrent-client/./src/components/sidebar/SidebarButton.svelte","webpack://torrent-client/./src/components/torrentlist/TorrentCard.svelte","webpack://torrent-client/./src/modules/Tab.svelte","webpack://torrent-client/./src/components/TorrentInfo.svelte","webpack://torrent-client/./src/components/AddTorrent.svelte","webpack://torrent-client/./src/App.svelte"],"sourcesContent":["<script>\r\n  let deferredPrompt\r\n\r\n  window.addEventListener('beforeinstallprompt', e => {\r\n    e.preventDefault()\r\n    deferredPrompt = e\r\n  })\r\n  async function promptInstall() {\r\n    deferredPrompt.prompt()\r\n    const { outcome } = await deferredPrompt.userChoice\r\n    if (outcome === 'accepted') {\r\n      deferredPrompt = null\r\n    }\r\n  }\r\n  function dismiss() {\r\n    deferredPrompt = null\r\n  }\r\n</script>\r\n\r\n{#if deferredPrompt}\r\n  <div class=\"alert alert-success filled-dm show\" on:click={promptInstall}>\r\n    <h4 class=\"alert-heading\">Install</h4>\r\n    <button class=\"close\" type=\"button\" on:click={dismiss}><span>Ã—</span></button>\r\n    Click here to install the app for more features!\r\n  </div>\r\n{/if}\r\n\r\n<style>\r\n  .alert {\r\n    display: block !important;\r\n    animation: fly-in 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);\r\n  }\r\n\r\n  @keyframes fly-in {\r\n    0% {\r\n      right: -50rem;\r\n    }\r\n    100% {\r\n      right: 0;\r\n    }\r\n  }\r\n</style>\r\n","<script>\r\n  export let value = ''\r\n  export let icon = ''\r\n  export let current = null\r\n  export let other = {}\r\n  $: selected = value === current\r\n  function click() {\r\n    if (current) current = value\r\n  }\r\n</script>\r\n\r\n<span class=\"sidebar-link sidebar-link-with-icon font-weight-bold pointer\" class:selected on:click={click} {...other}>\r\n  <span class=\"sidebar-icon bg-transparent justify-content-start mr-5\">\r\n    <span class=\"material-icons font-size-20\" class:selected>\r\n      {icon}\r\n    </span>\r\n  </span>\r\n  {value}\r\n</span>\r\n\r\n<style>\r\n  .sidebar-link.selected {\r\n    border-left: 2px solid #1890ff !important;\r\n    background: #1890ff33 !important;\r\n  }\r\n</style>\r\n","<script>\r\n  import { onDestroy, afterUpdate } from 'svelte'\r\n  import { fastPrettyBytes, fastToTS } from '../../modules/util.js'\r\n\r\n  export let torrent = null\r\n  export let selected = null\r\n  export let updateTorrents = () => {}\r\n  export let removeTorrent = () => {}\r\n\r\n  function select() {\r\n    selected = torrent\r\n  }\r\n  function handlePauseResume() {\r\n    if (torrent.paused) {\r\n      torrent.resume()\r\n    } else {\r\n      torrent.pause()\r\n    }\r\n    updateStatus()\r\n  }\r\n  function handleRemove() {\r\n    removeTorrent(torrent, () => {\r\n      updateTorrents()\r\n      if (selected === torrent) selected = null\r\n    })\r\n    updateStatus()\r\n  }\r\n\r\n  function handleDelete() {\r\n    removeTorrent(torrent, { destroyStore: true }, () => {\r\n      updateTorrents()\r\n      if (selected === torrent) selected = null\r\n    })\r\n    updateStatus()\r\n  }\r\n\r\n  let status, progressColor, statusColor, statusIcon\r\n  function updateStatus(skip) {\r\n    status = getTorrentStatus()\r\n    progressColor = colorMap[status]\r\n    statusIcon = statusIconMap[status]\r\n    statusColor = colorMap[status]\r\n    if (!skip) updateTorrents()\r\n  }\r\n  function copyMagnet() {\r\n    navigator.clipboard.writeText(torrent.magnetURI)\r\n  }\r\n  function saveTorrent() {\r\n    const file = new Blob(torrent.torrentFile, { type: 'application/x-bittorrent' })\r\n    const a = document.createElement('a')\r\n    const url = URL.createObjectURL(file)\r\n    a.href = url\r\n    a.download = (torrent.name || torrent.infohash) + '.torrent'\r\n    a.click()\r\n    a.remove()\r\n    URL.revokeObjectURL(url)\r\n  }\r\n\r\n  const statusIconMap = {\r\n    destroyed: 'delete',\r\n    paused: 'pause',\r\n    completed: 'done',\r\n    seeding: 'arrow_upward',\r\n    downloading: 'arrow_downward',\r\n    syncing: 'sync'\r\n  }\r\n  const colorMap = {\r\n    destroyed: 'danger',\r\n    paused: 'secondary',\r\n    completed: 'success',\r\n    seeding: 'success',\r\n    downloading: 'primary',\r\n    syncing: 'muted'\r\n  }\r\n\r\n  function getTorrentStatus() {\r\n    if (torrent.destroyed) return 'destroyed'\r\n    if (torrent.paused) return 'paused'\r\n    if (torrent.progress === 1) {\r\n      if (torrent.uploadSpeed === 0) return 'completed'\r\n      return 'seeding'\r\n    }\r\n    if (torrent.infoHash && torrent.timeRemaining !== Infinity) return 'downloading'\r\n    return 'syncing'\r\n  }\r\n\r\n  let progress = 0\r\n  function updateProgress() {\r\n    progress = torrent.progress.toFixed(5)\r\n  }\r\n  torrent.once('metadata', updateStatus)\r\n  torrent.once('done', updateStatus)\r\n  torrent.on('download', updateProgress)\r\n  updateStatus()\r\n  updateProgress()\r\n  afterUpdate(() => {\r\n    updateStatus(true)\r\n    updateProgress()\r\n  })\r\n  onDestroy(() => {\r\n    torrent.removeListener('done', updateStatus)\r\n    torrent.removeListener('metadata', updateStatus)\r\n    torrent.removeListener('download', updateProgress)\r\n  })\r\n</script>\r\n\r\n<div class=\"card bg-dark-dm bg-white-lm position-relative\">\r\n  <h2 class=\"card-title font-weight-bold d-flex flex-row justify-content-between\">\r\n    <div class=\"text-truncate\">\r\n      {torrent.name || torrent.infoHash || 'Torrent'}\r\n    </div>\r\n    <div class=\"dropdown toggle-on-hover\">\r\n      <button\r\n        class={'btn btn-square btn-link material-icons shadow-none text-' + statusColor}\r\n        data-toggle=\"dropdown\"\r\n        type=\"button\"\r\n        id={'more-' + torrent.infoHash}\r\n        aria-haspopup=\"true\"\r\n        aria-expanded=\"false\">\r\n        more_horiz\r\n      </button>\r\n      <div class=\"dropdown-menu dropdown-menu-right bg-dark-dm bg-white-lm font-weight-normal pointer font-size-12\" aria-labelledby={'more-' + torrent.infoHash}>\r\n        <span class=\"px-10 sidebar-link sidebar-link-with-icon\" on:click={handlePauseResume}>\r\n          <span class=\"sidebar-icon bg-transparent justify-content-start mr-0\">\r\n            <span class=\"material-icons font-size-16\">\r\n              {torrent.paused ? 'play_arrow' : 'pause'}\r\n            </span>\r\n          </span>\r\n          {torrent.paused ? 'Resume' : 'Pause'}\r\n        </span>\r\n        <span class=\"px-10 sidebar-link sidebar-link-with-icon\" on:click={handleRemove}>\r\n          <span class=\"sidebar-icon bg-transparent justify-content-start mr-0\">\r\n            <span class=\"material-icons font-size-16\">remove</span>\r\n          </span>\r\n          Remove\r\n        </span>\r\n        <span class=\"px-10 sidebar-link sidebar-link-with-icon\" on:click={handleDelete}>\r\n          <span class=\"sidebar-icon bg-transparent justify-content-start mr-0\">\r\n            <span class=\"material-icons font-size-16\">delete</span>\r\n          </span>\r\n          Remove With Files\r\n        </span>\r\n        <span class=\"px-10 sidebar-link sidebar-link-with-icon\" on:click={copyMagnet}>\r\n          <span class=\"sidebar-icon bg-transparent justify-content-start mr-0\">\r\n            <span class=\"material-icons font-size-16\">content_copy</span>\r\n          </span>\r\n          Copy Magnet Link\r\n        </span>\r\n        <span class=\"px-10 sidebar-link sidebar-link-with-icon\" on:click={saveTorrent}>\r\n          <span class=\"sidebar-icon bg-transparent justify-content-start mr-0\">\r\n            <span class=\"material-icons font-size-16\">file_copy</span>\r\n          </span>\r\n          Save Torrent File\r\n        </span>\r\n        <span class=\"px-10 sidebar-link sidebar-link-with-icon\" on:click={select}>\r\n          <span class=\"sidebar-icon bg-transparent justify-content-start mr-0\">\r\n            <span class=\"material-icons font-size-16\">info</span>\r\n          </span>\r\n          More Information\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </h2>\r\n  <div class=\"d-flex flex-row align-items-center flex-wrap torrent-stats font-size-12\">\r\n    <div class={'material-icons pr-5 text-' + statusColor}>\r\n      {statusIcon}\r\n    </div>\r\n    <span class=\"text-muted\">\r\n      {parseInt(progress * 100)}%\r\n    </span>\r\n    {#if torrent.length}\r\n      {#if torrent.progress === 1}\r\n        <span class=\"text-muted\">\r\n          {fastPrettyBytes(torrent.length)}\r\n        </span>\r\n      {:else}\r\n        <span class=\"text-muted\">\r\n          {fastPrettyBytes(torrent.received)} of {fastPrettyBytes(torrent.length)}\r\n        </span>\r\n      {/if}\r\n    {/if}\r\n    {#if status === 'seeding' && torrent.uploadSpeed}\r\n      <span class=\"text-muted\">\r\n        {fastPrettyBytes(torrent.uploadSpeed)}/s\r\n      </span>\r\n    {:else if (status === 'downloading' || status === 'paused') && torrent.downloadSpeed}\r\n      <span class=\"text-muted\">\r\n        {fastPrettyBytes(torrent.downloadSpeed)}/s\r\n      </span>\r\n    {/if}\r\n    {#if torrent.numPeers}\r\n      <span class=\"text-muted\">\r\n        {torrent.numPeers} Peer{torrent.numPeers === 1 ? '' : 's'}\r\n      </span>\r\n    {/if}\r\n    {#if !(torrent.progress === 1) && torrent.timeRemaining !== Infinity}\r\n      <span class=\"text-muted\">\r\n        {fastToTS(parseInt(torrent.timeRemaining / 1000))} remaining\r\n      </span>\r\n    {/if}\r\n  </div>\r\n  <div class={'bg-' + progressColor + ' position-absolute bottom-0 left-0'} style={`width: ${progress * 100}%; height: 1px`} />\r\n</div>\r\n\r\n<style>\r\n  .torrent-stats span + span::before {\r\n    content: 'â€¢';\r\n    padding: 0 1rem;\r\n  }\r\n</style>\r\n","<script>\r\n  import { getContext } from 'svelte'\r\n  import { TABS } from './Tabs.svelte'\r\n\r\n  const panel = {}\r\n  const { registerPanel, selectedPanel } = getContext(TABS)\r\n\r\n  registerPanel(panel)\r\n</script>\r\n\r\n{#if $selectedPanel === panel}\r\n  <slot />\r\n{/if}\r\n\r\n<style>\r\n  slot {\r\n    margin-bottom: 10px;\r\n\t\tpadding: 40px;\r\n\t\tborder: 1px solid #dee2e6;\r\n    border-radius: 0 0 .5rem .5rem;\r\n    border-top: 0;\r\n  }\r\n</style>\r\n","<script>\r\n  import { fastPrettyBytes, fastToTS } from '../modules/util.js'\r\n  import { Tabs, TabLabel, Tab } from '../modules/Tabination.js'\r\n  import { onMount, onDestroy } from 'svelte'\r\n\r\n  export let selected = null\r\n\r\n  function close() {\r\n    selected = null\r\n  }\r\n  let interval\r\n  onMount(() => {\r\n    interval = setInterval(() => {\r\n      selected = selected\r\n    }, 200)\r\n  })\r\n  onDestroy(() => {\r\n    clearInterval(interval)\r\n  })\r\n</script>\r\n\r\n{#if selected}\r\n  <div class=\"height\">\r\n    <Tabs>\r\n      <div class=\"d-flex flex-column h-full\">\r\n        <div class=\"d-flex flex-row px-20 pt-5\">\r\n          <TabLabel>Stats</TabLabel>\r\n          <TabLabel>\r\n            Files {selected.files?.length || ''}\r\n          </TabLabel>\r\n          <TabLabel>\r\n            Peers {selected.numPeers || ''}\r\n          </TabLabel>\r\n          <div on:click={close} class=\"pointer px-10 py-5 mx-5 ml-auto sidebar-link bg-dark-dm bg-white-lm\">Close</div>\r\n        </div>\r\n        <div class=\"bg-dark-dm bg-white-lm h-full overflow-y-scroll\">\r\n          <Tab>\r\n            <div class=\"content my-5 d-flex flex-column\">\r\n              <table class=\"table\">\r\n                <tbody>\r\n                  <tr>\r\n                    <th>Upload Speed</th>\r\n                    <td>{fastPrettyBytes(selected.uploadSpeed)}/s</td>\r\n                    <th>Uploaded</th>\r\n                    <td>{fastPrettyBytes(selected.uploaded)}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Download Speed</th>\r\n                    <td>{fastPrettyBytes(selected.downloadSpeed)}/s</td>\r\n                    <th>Downloaded</th>\r\n                    <td>{fastPrettyBytes(selected.downloaded)}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Ratio</th>\r\n                    <td>{selected.ratio.toFixed(3) || 0}</td>\r\n                    <th>Time Remaining</th>\r\n                    <td>{fastToTS(parseInt(selected.timeRemaining / 1000))}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Peers</th>\r\n                    <td>{selected.numPeers || 0}</td>\r\n                    <th>Files</th>\r\n                    <td>{selected.files?.length || 0}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </Tab>\r\n          <Tab>\r\n            <div class=\"content my-5\">\r\n              <table class=\"table table-auto\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Name</th>\r\n                    <th>Filesize</th>\r\n                    <th>Downloaded</th>\r\n                    <th>Progress</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {#if selected.files}\r\n                    {#each selected.files.sort((a, b) => b.length - a.length) as file}\r\n                      <tr>\r\n                        <td>{file.name}</td>\r\n                        <td>{fastPrettyBytes(file.length)}</td>\r\n                        <td>{fastPrettyBytes(file.downloaded)}</td>\r\n                        <td>{parseInt(file.progress * 100)}%</td>\r\n                      </tr>\r\n                    {/each}\r\n                  {/if}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </Tab>\r\n          <Tab>\r\n            <div class=\"content my-5\">\r\n              <table class=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Address</th>\r\n                    <th>Type</th>\r\n                    <th>Up</th>\r\n                    <th>Speed</th>\r\n                    <th>Down</th>\r\n                    <th>Speed</th>\r\n                    <th>Ratio</th>\r\n                    <th>Destroy</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {#if selected.wires}\r\n                    {#each selected.wires.sort((a, b) => (a.peerId > b.peerId ? 1 : -1)) as wire}\r\n                      <tr>\r\n                        <td>{wire.remoteAddress || wire.type}</td>\r\n                        <td>{wire.type}</td>\r\n                        <td>{fastPrettyBytes(wire.uploaded)}</td>\r\n                        <td>{fastPrettyBytes(wire.uploadSpeed())}/s</td>\r\n                        <td>{fastPrettyBytes(wire.downloaded)}</td>\r\n                        <td>{fastPrettyBytes(wire.downloadSpeed())}/s</td>\r\n                        <td>{(wire.downloaded / (wire.uploaded || 1) / selected.length).toFixed(2)}</td>\r\n                        <td class=\"text-danger pointer material-icons w-50\" on:click={() => wire.destroy()}>link_off</td>\r\n                      </tr>\r\n                    {/each}\r\n                  {/if}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </Tab>\r\n        </div>\r\n      </div>\r\n    </Tabs>\r\n  </div>\r\n{/if}\r\n\r\n<style>\r\n  table {\r\n    table-layout: fixed;\r\n  }\r\n\r\n  .table-auto {\r\n    table-layout: auto;\r\n  }\r\n  .height {\r\n    max-height: 50%;\r\n    height: 30rem;\r\n  }\r\n</style>\r\n","<script>\r\n  import { Tabs, TabLabel, Tab } from '../modules/Tabination.js'\r\n  import { fastPrettyBytes } from '../modules/util.js'\r\n  export let addTorrent = () => {}\r\n  export let removeTorrent = () => {}\r\n  let value = ''\r\n  let torrent = null\r\n  let files = []\r\n  const defaultData = {\r\n    announce: ['wss://tracker.openwebtorrent.com', 'wss://spacetradersapi-chatbox.herokuapp.com:443/announce', 'wss://peertube.cpy.re:443/tracker/socket'],\r\n    comment: 'Created With PWA Haven',\r\n    createdBy: 'PWA Haven',\r\n    name: ''\r\n  }\r\n  let createTorrent = Object.assign({}, defaultData)\r\n  function handleClose(success) {\r\n    if (!(success === true)) torrent?.destroy({ destroyStore: true })\r\n    files = []\r\n    torrent = null\r\n    value = ''\r\n    createTorrent = Object.assign({}, defaultData)\r\n  }\r\n  function handleFileInput({ target }) {\r\n    files = [...target.files]\r\n    handleTorrent(files, true)\r\n  }\r\n  function handleTextInput({ target }) {\r\n    handleTorrent([target.value], true)\r\n  }\r\n  const torrentRx = /(^magnet:)|(^[A-F\\d]{8,40}$)|(\\.torrent$)/i\r\n  let peers = []\r\n  export function handleTorrent(fileList, skip) {\r\n    if (!skip) files = fileList\r\n    const initTorrent = () => {\r\n      let id = null\r\n      if (fileList.length === 1) {\r\n        if (typeof fileList[0] === 'string' && torrentRx.test(fileList[0])) {\r\n          id = fileList[0]\r\n        } else if (torrentRx.test(fileList[0].name)) {\r\n          id = fileList[0]\r\n        }\r\n      }\r\n      if (id) {\r\n        torrent = addTorrent(id)\r\n        torrent.once('ready', () => {\r\n          torrent.pause()\r\n          files = torrent.files\r\n          peers = Object.values(torrent._peers).map(peer => ({ type: peer.type, addr: peer.addr }))\r\n          for (const id in torrent._peers) {\r\n            torrent.removePeer(id)\r\n          }\r\n          torrent = torrent\r\n        })\r\n      }\r\n      value = fileList.map(file => (typeof file === 'string' ? file : file.name)).join(' ,')\r\n    }\r\n\r\n    if (torrent) {\r\n      peers = []\r\n      removeTorrent(torrent, { destroyStore: true }, initTorrent)\r\n      torrent = null\r\n      files = []\r\n    } else {\r\n      initTorrent()\r\n    }\r\n  }\r\n  function handleAddTorrent() {\r\n    if (torrent) {\r\n      torrent.resume()\r\n      for (const peer of peers) {\r\n        if (peer.type === 'webSeed') {\r\n          torrent.addWebSeed(peer.addr)\r\n        } else if (peer.type !== 'webrtc') {\r\n          torrent.addPeer(peer.addr)\r\n        }\r\n      }\r\n    } else {\r\n      addTorrent(files, createTorrent)\r\n    }\r\n    handleClose(true)\r\n  }\r\n  function setPriority(value, file) {\r\n    torrent.files.filter(item => item === file)[0].select(value)\r\n  }\r\n  function handleTracker({ target }) {\r\n    if (torrent) {\r\n      torrent.announce = target.value.split('\\n')\r\n    } else {\r\n      createTorrent.announce = target.value.split('\\n')\r\n    }\r\n  }\r\n</script>\r\n\r\n<div class=\"modal-dialog\" role=\"document\">\r\n  <div class=\"modal-content w-three-quarter mh-three-quarter d-flex flex-column justify-content-between bg-very-dark-dm bg-light-lm p-0\">\r\n    <div class=\"content\">\r\n      <button class=\"close\" data-dismiss=\"modal\" type=\"button\" aria-label=\"Close\" on:click={handleClose}>\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n      <h5 class=\"modal-title font-weight-bold\">Add Torrent</h5>\r\n      <div class=\"text-right mt-20\">\r\n        <div class=\"input-group\">\r\n          <div class=\"input-group-prepend\">\r\n            <input type=\"file\" class=\"d-none\" id=\"torrent-file-input\" on:input={handleFileInput} multiple />\r\n            <label for=\"torrent-file-input\" class=\"btn btn-primary\">Select File</label>\r\n          </div>\r\n          <input type=\"text\" class=\"form-control\" placeholder=\"File, Magnet or InfoHash\" {value} on:input={handleTextInput} />\r\n          <div class=\"input-group-append\" on:click={handleAddTorrent}>\r\n            <button class=\"btn btn-success font-weight-bold\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\">Add</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    {#if files?.length}\r\n      <Tabs>\r\n        <div class=\"d-flex flex-column w-full overflow-hidden flex-grow-1\">\r\n          <div class=\"d-flex flex-row px-20 pt-5\">\r\n            <div class=\"d-flex flex-row\">\r\n              <TabLabel>Information</TabLabel>\r\n              <TabLabel>\r\n                Files {files?.length}\r\n              </TabLabel>\r\n              <TabLabel>\r\n                Trackers {torrent?.announce?.length || createTorrent.announce.length}\r\n              </TabLabel>\r\n            </div>\r\n          </div>\r\n          <div class=\"bg-dark-dm bg-white-lm overflow-y-scroll flex-grow-1\">\r\n            <Tab>\r\n              <div class=\"content my-20\">\r\n                <div class=\"input-group my-5\">\r\n                  <div class=\"input-group-prepend\">\r\n                    <span class=\"input-group-text w-100 flex-row-reverse\">Name</span>\r\n                  </div>\r\n                  {#if torrent}\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Torrent Name\" value={torrent.name || ''} name=\"name\" readonly />\r\n                  {:else}\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Torrent Name\" bind:value={createTorrent.name} name=\"name\" />\r\n                  {/if}\r\n                </div>\r\n                <div class=\"input-group my-5\">\r\n                  <div class=\"input-group-prepend\">\r\n                    <span class=\"input-group-text w-100 flex-row-reverse\">Comment</span>\r\n                  </div>\r\n                  {#if torrent}\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Created With wTorrent\" value={torrent.comment || ''} name=\"comment\" readonly />\r\n                  {:else}\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Created With wTorrent\" bind:value={createTorrent.comment} name=\"comment\" />\r\n                  {/if}\r\n                </div>\r\n                <div class=\"input-group my-5\">\r\n                  <div class=\"input-group-prepend\">\r\n                    <span class=\"input-group-text w-100 flex-row-reverse\">Author</span>\r\n                  </div>\r\n                  {#if torrent}\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"wTorrent\" value={torrent.createdBy || ''} name=\"createdBy\" readonly />\r\n                  {:else}\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"wTorrent\" bind:value={createTorrent.createdBy} name=\"createdBy\" />\r\n                  {/if}\r\n                </div>\r\n                <div class=\"input-group my-5\">\r\n                  <div class=\"input-group-prepend\">\r\n                    <span class=\"input-group-text w-100 flex-row-reverse\">File Size</span>\r\n                  </div>\r\n                  <input type=\"text\" class=\"form-control\" value={fastPrettyBytes(torrent?.length || files.reduce((sum, { size }) => sum + size, 0))} readonly />\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n            <Tab>\r\n              <div class=\"content my-5\">\r\n                <table class=\"table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Name</th>\r\n                      <th>Filesize</th>\r\n                      {#if torrent}\r\n                        <th class=\"w-100\">Priority</th>\r\n                      {/if}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {#each files.sort((a, b) => b.length - a.length) as file}\r\n                      <tr>\r\n                        <td>{file.name}</td>\r\n                        <td>{(file.length && fastPrettyBytes(file.length)) || (file.size && fastPrettyBytes(file.size)) || '?'}</td>\r\n                        {#if torrent}\r\n                          <td><input type=\"number\" placeholder=\"0\" class=\"form-control\" on:input={value => setPriority(value, file)} /></td>\r\n                        {/if}\r\n                      </tr>\r\n                    {/each}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </Tab>\r\n            <Tab>\r\n              <div class=\"content my-5\">\r\n                <textarea\r\n                  class=\"form-control w-full h-350 my-20 form-control-md\"\r\n                  placeholder=\"wss://exampletracker.xyz:port\"\r\n                  value={(torrent?.announce || createTorrent.announce).join('\\n')}\r\n                  on:input={handleTracker} />\r\n              </div>\r\n            </Tab>\r\n          </div>\r\n        </div>\r\n      </Tabs>\r\n    {/if}\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .mh-three-quarter {\r\n    max-height: 75%;\r\n  }\r\n</style>\r\n","<script>\n  import InstallPrompt from './components/InstallPrompt.svelte'\n  import Sidebar from './components/sidebar/Sidebar.svelte'\n  import TorrentList from './components/torrentlist/TorrentList.svelte'\n  import TorrentInfo from './components/TorrentInfo.svelte'\n  import AddTorrent from './components/AddTorrent.svelte'\n  import Client from './modules/Client.svelte'\n\n  let name = ''\n  let files = []\n\n  navigator.serviceWorker.register('/sw.js')\n  // loading files\n  function handleDrop({ dataTransfer }) {\n    handleItems([...dataTransfer.items])\n  }\n\n  function handlePaste({ clipboardData }) {\n    handleItems([...clipboardData.items])\n  }\n\n  async function handleItems(items) {\n    const promises = items.map(item => {\n      if (item.kind === 'file') {\n        return item.getAsFile()\n      }\n      if (item.type === 'text/plain') {\n        if (item.kind === 'string') {\n          return new Promise(resolve => {\n            item.getAsString(url => {\n              if (/(^magnet:)|(^[A-F\\d]{8,40}$)|(.*\\.torrent$)/i.test(url)) {\n                resolve(url)\n              } else {\n                resolve()\n              }\n            })\n          })\n        } else if (item.kind === 'file') {\n          return item.getAsFile()\n        }\n      }\n      if (!item.type) {\n        let entry = item.webkitGetAsEntry()\n        if (entry?.isDirectory) {\n          return new Promise(resolve => {\n            folder.createReader().readEntries(async entries => {\n              const filePromises = entries.filter(entry => entry.isFile).map(file => new Promise(resolve => file.file(resolve)))\n              resolve(await Promise.all(filePromises))\n            })\n          })\n        } else if (entry && !entry.isDirectory) {\n          return new Promise(resolve => entry.file(resolve))\n        }\n        return\n      }\n      return\n    })\n    handleTorrent((await Promise.all(promises)).flat().filter(i => i))\n    prompt.classList.add('show')\n  }\n\n  if ('launchQueue' in window) {\n    launchQueue.setConsumer(async launchParams => {\n      if (!launchParams.files.length) {\n        return\n      }\n      handleTorrent([await launchParams.files[0].getFile()])\n      prompt.classList.add('show')\n    })\n  }\n\n  let current = 'All'\n  let torrents = []\n  let selected = null\n  let addTorrent\n  let client\n  let updateTorrents\n  let handleTorrent\n  let removeTorrent\n  let prompt\n</script>\n\n<div class=\"sticky-alerts d-flex flex-column-reverse\">\n  <InstallPrompt />\n</div>\n<Client bind:addTorrent bind:client bind:current bind:torrents bind:updateTorrents bind:removeTorrent />\n<div class=\"modal\" id=\"modal-add\" tabIndex=\"-1\" role=\"dialog\" data-overlay-dismissal-disabled=\"true\" bind:this={prompt}>\n  <AddTorrent {addTorrent} {removeTorrent} bind:handleTorrent />\n</div>\n<div class=\"page-wrapper with-sidebar\">\n  <Sidebar bind:current />\n  <div class=\"content-wrapper d-flex flex-column justify-content-between\">\n    <div class=\"overflow-x-auto overflow-y-scroll flex-grow-1\">\n      <TorrentList {torrents} bind:selected {updateTorrents} {removeTorrent} />\n    </div>\n    <TorrentInfo bind:selected />\n  </div>\n</div>\n\n<svelte:head>\n  <title>{name || 'Torrent Client'}</title>\n</svelte:head>\n\n<svelte:window on:drop|preventDefault={handleDrop} on:dragover|preventDefault on:paste={handlePaste} />\n\n<style>\n  * {\n    user-select: none;\n  }\n  .sticky-alerts {\n    --sticky-alerts-top: auto;\n    bottom: 1rem;\n  }\n  :global(.pointer) {\n    cursor: pointer;\n  }\n</style>\n"],"names":[],"sourceRoot":""}